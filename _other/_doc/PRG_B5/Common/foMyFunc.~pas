unit foMyFunc;


interface

uses classes, Windows, dbctrls, Messages, Sysutils, graphics,ActiveX, ComObj, DBGridEh,GridsEh,
  registry, ExtCtrls, stdctrls, Forms, Printers, DBGrids, Controls, {$IFDEF VER150} Variants,{$ENDIF} ADODB, DB, RXDBCtrl, ShellAPI,dbclient;

const
  xxx_RefrMsg = WM_User + 13;
  xxx_Cancel = WM_User + 14;
  WM_ShowText = WM_User + 15;

type
  PHICON = ^HICON;
    TWinHackControl = class(TWinControl)
     property Text;
  end;
  
  THackGrid = class(TCustomDBGrid)
  public
    property RowHeights;
    property DataLink;
    property Canvas;
    property Col;
    property Row;
 //   procedure MouseToCell(X, Y: Integer; var ACol, ARow: Longint);
  end;
  THackGridEh = class(TDBGridEh)
  public
    property RowHeights;
    property DataLink;
    property Canvas;
    property Col;
    property Row;
    procedure MouseToCell(X, Y: Integer; var ACol, ARow: Longint);
  end;
    THackControl = class(TCustomEdit)
   //   property Text;
   //   property Color;
      property ReadOnly;
    end;
  TRTType = (rtEdit, rtDel, rtViza);

  TEObjType = (eotNone, eotCA,
               eotUsers, eotUsersGroup,
               eotSys
               );

procedure RotateBMP (SrcBmp : TBitmap; var Bmp : TBitmap ) ;  
procedure CopyBMP (X_h : Extended; SrcBmp : TBitmap; var Bmp : TBitmap ) ;

procedure OpenURL(Url: string);

procedure GetValues(Reg : TRegistry; SL : TStrings; Preff : String);
procedure SaveValues(Reg : TRegistry; SL : TStrings; Preff : String);

function StrToFloatAdv(S: string): Extended;

procedure SaveSplitterSettingsFromRegistry(const ASplitter : TSplitter; APath : String);
procedure LoadSplitterSettingsFromRegistry(const ASplitter : TSplitter; APath : String);

procedure SaveValToRegistry(const Val : Variant; APath, AValName : String);
procedure LoadValFromRegistry(var Val : Variant; APath, AValName : String);

procedure SaveFormSettingsToRegistry(const AForm : TForm; APath : String);
procedure LoadFormSettingsToRegistry(const AForm : TForm; APath : String);

procedure SaveGridSettingsToRegistry(const AGrid : TDBGrid; APath : String);
procedure LoadGridSettingsFromRegistry(const AGrid : TDBGrid; APath : String);

procedure BeginUpdateControl(AControl: TWinControl);
procedure EndUpdateControl(AControl: TWinControl);

procedure ReOrderAdoCDS(AField : TField; var ASort : String); overload;
procedure ReOrderADO(adoCDS: TCustomADODataSet; OrdField : String; var ASort : String); overload;
function GetBtnSortMarker(Field: TField): TSortMarker;

function GetControlOwner(AControl : TComponent) : TCustomForm;
function GetFileSizeByName(FileName: String): Integer;
procedure GetAssociatedIcon(FileExt: string; PLargeIcon, PSmallIcon: PHICON);

procedure CheckExcel;
procedure CDSToExcelTable(CDS : TDataSet; ARange: Variant; KeyName : String);

function CDSApplyUpdates(CDS : TClientDataSet; IDFieldName : String; IDFieldValue : integer; ChCountIgnore : boolean = false) : boolean;

procedure GreedToExcel(Grid: TDBGrid; ACaption : string = ''; NeedFooter : boolean = rue);


procedure DisableControl(AControl : TControl);
procedure EnableControl(AControl : TControl);
function CtrlDown : Boolean;

implementation


function CtrlDown : Boolean;
var
  State : TKeyboardState;
begin
  GetKeyboardState(State);
  Result := ((State[vk_Control] And 128) <> 0);
end;

function ShiftDown : Boolean;
var
  State : TKeyboardState;
begin
  GetKeyboardState(State);
  Result := ((State[vk_Shift] and 128) <> 0);
end;

function AltDown : Boolean;
var
  State : TKeyboardState;
begin
  GetKeyboardState(State);
  Result := ((State[vk_Menu] and 128) <> 0);
end;



procedure DisableControl(AControl : TControl);
var i : integer;
begin
  if (AControl is TRxDBCalcEdit) then TRxDBCalcEdit(AControl).ReadOnly := true;
  if (AControl is TDBDateEdit) then TDBDateEdit(AControl).ReadOnly := true;
  if (AControl is TButton) then TButton(AControl).Enabled := false;
  if (AControl is TDBCheckBox) then TDBCheckBox(AControl).Enabled := false;
  if (AControl is TCustomControl) and not (AControl is TCustomEdit) then TCustomControl(AControl).Enabled := false;

  if (AControl is TDBEdit) then TDBEdit(AControl).ReadOnly := true;
  
  if (AControl is TCustomEdit) then THackControl(AControl).ReadOnly := true;
  if (AControl is TCustomEdit) or (AControl is TCustomComboBox) {or (AControl is TCustomControl) }then
    THackControl(AControl).Color := clInactiveBorder;

  if AControl is TWinControl then
    for i := 0 to TWinControl(AControl).ControlCount - 1 do
      DisableControl(TWinControl(AControl).Controls[i]);
end;

procedure EnableControl(AControl : TControl);
var i : integer;
begin
  AControl.Enabled := true;
  if (AControl is TCustomEdit) or (AControl is TCustomComboBox) {or (AControl is TCustomControl)} then
    THackControl(AControl).Color := clWindow;
  if AControl is TWinControl then
    for i := 0 to TWinControl(AControl).ControlCount - 1 do
      EnableControl(TWinControl(AControl).Controls[i]);
end;

procedure GreedToExcel(Grid: TDBGrid; ACaption : string; NeedFooter : boolean);
var i, j, MaxColWdth : integer;
   // OldValue : Variant;
    ExcelApp, DataValues : Variant;
    Workbook, Column, Sheet, Cell1, Cell2, Range : Variant;
    BeginCol, BeginRow, ColumnsCnt, XXX: integer;
    S : String;
    AHandle : HWnd;
begin
  if Screen.ActiveForm <> nil then
    AHandle := Screen.ActiveForm.Handle
  else
    AHandle := 0;
  CheckExcel;
   with Grid.DataSource.DataSet do
  begin
  //  OldValue := Grid.DataSource.DataSet.Fields[0].AsVariant;
    BeginCol := 1;
    BeginRow := 1;

    MaxColWdth := 40;
    
    DisableControls;
    ExcelApp := CreateOleObject('Excel.Application');
    ExcelApp.Application.EnableEvents := false;

    try
      try Workbook := ExcelApp.WorkBooks.Add; except end;
      Sheet := ExcelApp.Workbooks[1].WorkSheets[1];

      if (trim(ACaption) <> '') then
        BeginRow := 3;
      ColumnsCnt := 0;
      for i := 0 to Grid.Columns.Count - 1 do
       if Grid.Columns[i].Visible then inc(ColumnsCnt);
       
      DataValues := VarArrayCreate([0, RecordCount + 0, 0, ColumnsCnt - 1], varVariant);

      XXX := -1;
      for i := 0 to Grid.Columns.Count - 1 do
      begin
        if Grid.Columns[i].Visible then
        begin
          inc(XXX);
          DataValues[0, XXX] := Grid.Columns[i].Title.Caption;
        end;
      end;

      j := 1;
      First;
      while not EOF do
      begin
        XXX := -1;
        for i := 0 to Grid.Columns.Count - 1 do
        begin
          if Grid.Columns[i].Visible then
          begin
            inc(XXX);

            if (Grid.Columns[i].Title.Caption) <> '' then
            begin
              if Assigned(Grid.Columns[i].Field.OnGetText) then
                DataValues[j, XXX] := Grid.Columns[i].Field.DisplayText
              else
              begin
                if not (Grid.Columns[i].Field is TBooleanField) then
                begin
                  if (Grid.Columns[i].Field is TFloatField) then
                  begin
                    if not Grid.Columns[i].Field.IsNull then
                    begin
                      S := TFloatField(Grid.Columns[i].Field).DisplayFormat;
                      if S = '' then
                        S := '0.##';
                      DataValues[j, XXX] := StrToFloat(FormatFloat(S, Grid.Columns[i].Field.AsFloat))
                    end;
                  end
                  else
                    if Grid.Columns[i].Field is TStringField then
                      DataValues[j, XXX] := StringReplace(Grid.Columns[i].Field.AsString, #13, '', [rfReplaceAll, rfIgnoreCase])
                    else
                      DataValues[j, XXX] := Grid.Columns[i].Field.Value;
                end
                else
                begin
                  if Grid.Columns[i].Field.AsBoolean then
                    DataValues[j, XXX] := 'Да'
                  else
                    DataValues[j, XXX] := 'Нет'
                end;
              end;
            end;
          end;
        end;

        inc(j);
        Next;
      end;
      Cell1 := Sheet.Cells[BeginRow, BeginCol];
      Cell2 := Sheet.Cells[BeginRow + RecordCount + 0, BeginCol + ColumnsCnt - 1];
      Range := Sheet.Range[Cell1, Cell2];
      Range.Value := DataValues;
      Range.Borders.LineStyle := 1;

      Cell1 := Sheet.Cells[BeginRow, BeginCol];
      Cell2 := Sheet.Cells[BeginRow, BeginCol + ColumnsCnt - 1];
      Range := Sheet.Range[Cell1, Cell2];
      Range.Font.Bold := true;
        
      for i := 0 to ColumnsCnt - 1 do
      begin
        Column := Sheet.Columns[BeginCol + i];
        Column.VerticalAlignment := 1;


        Column.AutoFit;
        j := Column.ColumnWidth;
        if (j > MaxColWdth) then
        begin
          Column.ColumnWidth := MaxColWdth;
        end;
        if i= 5 then  Column.ColumnWidth := 40;
        Column.WrapText := true;
      end;

      if (trim(ACaption) <> '') then
      begin
        Cell1 := Sheet.Cells[1, BeginCol];
        Cell1.Font.Bold := true;
        Cell1.Font.Size := 14;
        Cell1.Value := ACaption;
        Cell1.WrapText := false;
      end;
      if (NeedFooter) then
      begin
        Cell1 := Sheet.Cells[Grid.DataSource.DataSet.RecordCount + BeginRow + 2, BeginCol + 1];
        Cell1.Value := '_______________/Дата:__________';
        Cell1.WrapText := false;
      end;
      ExcelApp.Visible := true;
    except
      ExcelApp.Quit;
      ExcelApp := Null;

    end;

//      ExcelApp := Null;
  //  Grid.DataSource.DataSet.Locate(Grid.DataSource.DataSet.Fields[0].FieldName, OldValue, [loCaseInsensitive]);
    EnableControls;
  end;
end;


function StrToFloatAdv(S: string): Extended;
begin
  S := trim(S);
  S := StringReplace(S, ' ', '', [rfReplaceAll, rfIgnoreCase]);
  if S = '' then
    Result := 0
  else
  begin
    if (DecimalSeparator = '.') then
      S := StringReplace(Trim(S), ',', DecimalSeparator, [rfReplaceAll, rfIgnoreCase]);
    if (DecimalSeparator = ',') then
      S := StringReplace(Trim(S), '.', DecimalSeparator, [rfReplaceAll, rfIgnoreCase]);
    try
      Result := StrToFloat(S);
    except
      Result := 0;
    end;
  end;
end;

procedure RotateBMP (SrcBmp : TBitmap; var Bmp : TBitmap ) ;
var X, Y  : integer ;
    AColor : TColor;
begin
  if Bmp = nil then Bmp := TBitmap.Create ;
  Bmp.Width := SrcBmp.Height ;
  Bmp.Height := SrcBmp.Width ;
  for x := 0 to SrcBmp.Width do
  begin
    for y := 0 to SrcBmp.Height do
    begin
      AColor := GetPixel(SrcBmp.Canvas.Handle, X, Y);
      SetPixel(Bmp.Canvas.Handle, Y, SrcBmp.Width - X, AColor);

    end;
  end;
end;

procedure CopyBMP (X_h : Extended; SrcBmp : TBitmap; var Bmp : TBitmap ) ;
var X, Y, AX, AY  : integer ;
    AColor : TColor;
begin
  if Bmp = nil then Bmp := TBitmap.Create ;
  AX := TRUNC(({2400} printer.PageWidth/X_h - SrcBmp.Width) / 2);
  AY := TRUNC(({3200} printer.PageHeight/X_h - SrcBmp.Height) / 2);
  Bmp.Height := AY + SrcBmp.Height;
  Bmp.Width := AX + SrcBmp.Width;
//  Bmp.Height := SrcBmp.Height ;
//  Bmp.Width := SrcBmp.Width ;
  for x := 0 to SrcBmp.Width do
  begin
    for y := 0 to SrcBmp.Height do
    begin
      AColor := GetPixel(SrcBmp.Canvas.Handle, X, Y);
      SetPixel(Bmp.Canvas.Handle, AX + X, AY + Y, AColor);

    end;
  end;
end;

function CDSApplyUpdates(CDS : TClientDataSet; IDFieldName : String; IDFieldValue : integer; ChCountIgnore : boolean) : boolean;
var Field : TField;
    OldAfterPost: TDataSetNotifyEvent;
begin
  Result := false;
  if CDS.State in [dsEdit, dsInsert] then CDS.Post;
  if (CDS.ChangeCount = 0) and (not ChCountIgnore) then
  begin
    Result := true;
    Exit;
  end;
  with CDS do
  begin
    try
      Filtered := false;
      OldAfterPost := AfterPost;
      AfterPost := nil;
      if IDFieldName <> '' then
      begin
        DisableControls;
        try
          Field := FieldByName(IDFieldName);
          First;
          while not EOF do
          begin
            Edit;
            Field.AsInteger := IDFieldValue;
            Post;
            Next;
          end;
        finally
          EnableControls;
        end;
      end;
      AfterPost := OldAfterPost;
      Result := ApplyUpdates(0) = 0;
    except
      AfterPost := OldAfterPost;
    end;
  end;
end;



function SetExcelBMVal(ARange : Variant; BMName : String; AVal : Variant) : boolean;
var V, V2 : Variant;
    R : TRect;
    Y, Y0 : integer;
    i : integer;
    S : String;
begin
  case Vartype(AVal) of
    varBoolean : if AVal then V2 := 'Да' else V2 := 'Нет';
    else
      V2 := AVal;
  end;
  
  Result := false;
//  V := ARange.Replace(BMName, V2, 1);
//  V := ARange.Find(BMName, Null, 1, 1);
  V := ARange.Find(What := BMName, LookAt := 1);

  if not VarIsEmpty(V) then
  begin
    Result := true;
    case Vartype(AVal) of
      varCurrency : V.Value2 := V2;
      else
        V.Value := V2;
    end;
 //   V.Value := V2;
  end;
end;

procedure CDSToExcel(CDS : TDataSet; ARange: Variant);
var i, j : integer;
    AField : TField;
    function GetFVal : Variant;
    var S : String;
    begin
      if AField is TBCDField then
      begin
        if TBCDField(AField).Size = 0 then
        begin
          S := AField.AsString;
          Result := '''' + S;
        end
        else
          Result := AField.AsCurrency;
      end
      else
      if AField is TStringField then
      begin
        Result := '''' + AField.AsString;
      end
      else
      if AField is TDateTimeField then
      begin
        if AField.IsNull then
          Result := ''
        else
          Result := AField.AsDateTime;
      end
      else
        Result := AField.Value;
    end;
begin
  for i := 0 to CDS.Fields.Count - 1 do
  begin
    AField := CDS.Fields[i];
    if SetExcelBMVal(ARange, '^' + AField.FieldName, GetFVal) then
//    if SetExcelBMVal(ARange, '^' + AField.FieldName, AField.AsString, ACanvas) then
    begin
      j := 2;
      while true do
      begin
        if not SetExcelBMVal(ARange, '^' + AField.FieldName + IntToStr(j), GetFVal) then
//        if not SetExcelBMVal(ARange, '^' + AField.FieldName + IntToStr(j), AField.AsString, ACanvas) then
          Break;
        inc(j);
      end;
    end;
  end;
end;

procedure CDSToExcelTable(CDS : TDataSet; ARange: Variant; KeyName : String);
var i, j, ACol, ARow, AColCount : integer;
    AField : TField;
    V, Cell1, Cell2 : Variant;
begin
  AColCount := 0;
  try
   // V := ARange.Find(KeyName, Null, 1, 1);
    V := ARange.Find(What := KeyName, LookAt := 1);

    if not VarIsEmpty(V) then
    begin
      ACol := V.Column;
      ARow := V.Row;
      while true do
      begin
        V := ARange.Cells[ARow, ACol + AColCount + 1];
        if (V.MergeCells) or (VarToStr(V.Value) <> '') then
          inc(AColCount)
        else
          Break;
      end;
      with CDS do
      begin
        First;
        while not Eof do
        begin
          V := ARange.Worksheet.Rows[ARow];
          if RecNo <> recordCount then
          begin
            V.Copy;
            Cell1 := ARange.Worksheet.Rows[ARow];
            Cell1.Insert(2);
          end;  
       {   V := ARange.Worksheet.Range[Cell1, Cell2];
          if RecNo <> recordCount then
          begin
            V.Copy;
            Cell1 := ARange.Worksheet.Cells[ARow, ACol + i];
            Cell1.Insert(2);
          end;  }
          Cell1 := ARange.Worksheet.Cells[ARow, ACol];
          Cell2 := ARange.Worksheet.Cells[ARow, ACol + AColCount];
          V := ARange.Worksheet.Range[Cell1, Cell2];
          //V.RowHeight := 12.75;
          CDSToExcel(CDS, V);
          Next;
          inc(ARow);
        end;
        ARange.Application.CutCopyMode := False;
      end;
    end;
  finally

  end;
end;

procedure CheckExcel;
var AHandle : HWnd;
    ClassID: TCLSID; Rez : HRESULT;
begin
  if Screen.ActiveForm <> nil then
    AHandle := Screen.ActiveForm.Handle
  else
    AHandle := 0;
  Rez := CLSIDFromProgID(PWideChar(WideString('Excel.Application')), ClassID);
  if Rez <> S_OK then
  begin
    MessageBox(AHandle, 'Excel не установлен!', '', MB_ICONERROR);
    Abort;
  end;
end;

procedure GetAssociatedIcon(FileExt: string; PLargeIcon, PSmallIcon: PHICON);
var
  IconIndex: UINT;  // Position of the icon in the file
  FileName, FileType: string;
  Reg: TRegistry;
  p: integer;
  p1, p2: pchar;
begin
  IconIndex := 0;
  // Get the extension of the file
  if ((FileExt <> '.EXE') and (FileExt <> '.ICO')) then
  begin
    Reg := nil;
    try
      Reg := TRegistry.Create(KEY_QUERY_VALUE);
      Reg.RootKey := HKEY_CLASSES_ROOT;
      if FileExt = '.EXE' then FileExt := '.COM';
      if Reg.OpenKeyReadOnly(FileExt) then
        try
          FileType := Reg.ReadString('');
        finally
          Reg.CloseKey;
        end;
      if (FileType <> '') and Reg.OpenKeyReadOnly(
          FileType + '\DefaultIcon') then
        try
          FileName := Reg.ReadString('');
        finally
          Reg.CloseKey;
        end;
    finally
      Reg.Free;
    end;

    // If we couldn't find the association, we will
    // try to get the default icons
    if FileName <> '' then
    begin
      p1 := PChar(FileName);
      p2 := StrRScan(p1, ',');
      if p2 <> nil then
      begin
        p := p2 - p1 + 1; // Position of the comma
        IconIndex := StrToInt(Copy(FileName, p + 1, Length(FileName) - p));
        SetLength(FileName, p - 1);
      end;
    end;
  end;
  // Attempt to get the icon
  if ExtractIconEx(pchar(FileName), IconIndex, PLargeIcon^, PSmallIcon^, 1) <> 1 then
  begin
    if      (FileExt = '.DOC') then IconIndex := 1
    else if (FileExt = '.EXE')
         or (FileExt = '.COM') then IconIndex := 2
    else if (FileExt = '.HLP') then IconIndex := 23
    else if (FileExt = '.INI')
         or (FileExt = '.INF') then IconIndex := 63
    else if (FileExt = '.TXT') then IconIndex := 64
    else if (FileExt = '.BAT') then IconIndex := 65
    else if (FileExt = '.DLL')
         or (FileExt = '.SYS')
         or (FileExt = '.VBX')
         or (FileExt = '.OCX')
         or (FileExt = '.VXD') then IconIndex := 66
    else if (FileExt = '.FON') then IconIndex := 67
    else if (FileExt = '.TTF') then IconIndex := 68
    else if (FileExt = '.FOT') then IconIndex := 69
    else
      IconIndex := 0;
    // Attempt to get the icon.
    if ExtractIconEx(pchar(FileName), IconIndex,
        PLargeIcon^, PSmallIcon^, 1) <> 1 then
    begin
      // Failed to get the icon. Just "return" zeroes.
      if PLargeIcon <> nil then PLargeIcon^ := 0;
      if PSmallIcon <> nil then PSmallIcon^ := 0;
    end;
  end;
end;


function GetFileSizeByName(FileName: String): Integer;
var
  FindData: TWin32FindData; 
  hFind: THandle; 
begin 
  Result := -1;
  hFind := FindFirstFile(PChar(FileName), FindData); 
  if hFind <> INVALID_HANDLE_VALUE then 
  begin 
    Windows.FindClose(hFind); 
    if (FindData.dwFileAttributes and FILE_ATTRIBUTE_DIRECTORY) = 0 then 
      Result := FindData.nFileSizeHigh * MAXDWORD + FindData.nFileSizeLow; 
  end; 
end;


procedure OpenURL(Url: string); 
var 
 ts: string; 
begin 
 with TRegistry.Create do 
   try 
     rootkey := HKEY_CLASSES_ROOT; 
     OpenKey('\htmlfile\shell\open\command', False); 
     try 
       ts := ReadString(''); 
     except 
       ts := ''; 
     end; 
     CloseKey; 
   finally 
     Free; 
   end; 
 if ts = '' then Exit; 
 // remove quotes and commandline parameters 
 ts := Copy(ts, Pos('"', ts) + 1, Length(ts)); 
 ts := Copy(ts, 1, Pos('"', ts) - 1); 
 ShellExecute(0, 'open', PChar(ts), PChar(url), nil, SW_SHOW); 
end; 


function GetControlOwner(AControl : TComponent) : TCustomForm;
var C : TComponent;
begin
  Result := nil;
  if AControl <> nil then
  begin
    if AControl is TCustomForm then
      Result := AControl as TCustomForm
    else
    begin
      C := AControl.Owner;
      if C is TCustomForm then
        Result := C as TCustomForm
      else
        Result := nil;
      while (Result = nil) and (C <> nil) do
      begin
        if C is TCustomForm then
          Result := C as TCustomForm;
        C := C.Owner;//Owner;
      end;
    end;
  end;
end;


function GetBtnSortMarker(Field: TField): TSortMarker;
var Index : TIndexDef;
begin
  Result := smNone;

  if (Field.DataSet is TCustomADODataSet) then
  begin
    if (TCustomADODataSet(Field.DataSet).Sort = '') then Exit;

    if (Field.DataSet as TCustomADODataSet).Sort = Field.FieldName then
      Result := smUp
    else
      if (Field.DataSet as TCustomADODataSet).Sort = Field.FieldName + ' DESC' then
        Result := smDown;
  end;
end;


procedure BeginUpdateControl(AControl: TWinControl);
begin
  SendMessage(AControl.Handle, WM_SETREDRAW, 0, 0);
end;

procedure EndUpdateControl(AControl: TWinControl);
begin
  SendMessage(AControl.Handle, WM_SETREDRAW, 1, 0);
  AControl.Refresh;
end;

procedure ReOrderAdoCDS(AField : TField; var ASort : String);
begin
  if (AField <> nil) and (AField.DataSet <> nil) and (AField.DataSet is TCustomADODataSet) then
    ReOrderADO(AField.DataSet as TCustomADODataSet, AField.FieldName, ASort);
end;

procedure ReOrderADO(adoCDS: TCustomADODataSet; OrdField : String; var ASort : String);
var S : String;
begin
 // BeginUpdateControl(AGrid);
  try
    if adoCDS.FindField(OrdField) = nil then
      Exit;

    adoCDS.DisableControls;
    try
      if adoCDS.Sort <> '' then
      begin
        if adoCDS.Sort = OrdField then
          S := adoCDS.Sort + ' DESC'
        else
          S := OrdField;
      end
      else
        S := OrdField;
      adoCDS.Sort := S;
    finally
      ASort := adoCDS.Sort;
//      AGrid.SelectedRows.Clear;
    //  if AField <> nil then
//        CDS.Locate(AKey, AOldKey, [loCaseInsensitive]);
       adoCDS.EnableControls;
    //  AGrid.LeftCol := OldCol;
    //  EndUpdateControl(AGrid);
    end;
  except

  end;  
end;


procedure SaveGridSettingsToRegistry(const AGrid : TDBGrid; APath : String);
var Reg : TRegistry;
    i : integer;
    CDS : TCustomADODataSet;
begin
  try
    Reg := TRegistry.Create;
    try
      Reg.RootKey := HKEY_CURRENT_USER;

      if Reg.OpenKey(APath, true) then
      begin
        for i := 0 to AGrid.Columns.Count - 1 do
        begin
          Reg.WriteInteger('Column_' + AGrid.Columns[i].FieldName, AGrid.Columns[i].Width);

        end;
      end;
    finally
      Reg.CloseKey;
      Reg.Free;
    end;
  except
  end;
end;

procedure LoadGridSettingsFromRegistry(const AGrid : TDBGrid; APath : String);
var Reg : TRegistry;
    i : integer;
    CDS : TCustomADODataSet;
    S : String;
begin
  try
    Reg := TRegistry.Create;
    try
      Reg.RootKey := HKEY_CURRENT_USER;
      if Reg.OpenKey(APath, false) then
      begin
        for i := 0 to AGrid.Columns.Count - 1 do
          if Reg.ValueExists('Column_' + AGrid.Columns[i].FieldName) then
            AGrid.Columns[i].Width := Reg.ReadInteger('Column_' + AGrid.Columns[i].FieldName);

        end;
    finally
      Reg.CloseKey;
      Reg.Free;
    end;
  except
  end;
end;

procedure SaveValToRegistry(const Val : Variant; APath, AValName : String);
var Reg : TRegistry;
begin
  try
    Reg := TRegistry.Create;
    try
      Reg.RootKey := HKEY_CURRENT_USER;

      if Reg.OpenKey(APath, true) then
      begin
        case VarType(Val) of
          varSmallint, varInteger : Reg.WriteInteger(AValName, Val);
          varSingle, varDouble, varCurrency, varDate : Reg.WriteFloat(AValName, Val);
          varEmpty, varNull : Reg.DeleteValue(AValName);
          else Reg.WriteString(AValName, VarToStr(Val));
        end;
      end;
    finally
      Reg.CloseKey;
      Reg.Free;
    end;
  except
  end;
end;

procedure LoadValFromRegistry(var Val : Variant; APath, AValName : String);
var Reg : TRegistry;
    RRR : TRegDataType;
begin
  Val := Null;
  try
    Reg := TRegistry.Create;
    try
      Reg.RootKey := HKEY_CURRENT_USER;

      if Reg.OpenKey(APath, false) then
      begin
        if Reg.ValueExists(AValName) then
        begin
          RRR := Reg.GetDataType(AValName);
        case RRR of
          rdString : Val := Reg.ReadString(AValName);
          rdInteger: Val := Reg.ReadInteger(AValName);
      //    varDate : Reg.WriteDateTime(AValName, Val);
          else Val := Reg.ReadFloat(AValName);
        end;

        end;
      end;
    finally
      Reg.CloseKey;
      Reg.Free;
    end;
  except
  end;
end;
function HackFindControl(const ASplitter : TSplitter): TControl;
var
  P: TPoint;
  I: Integer;
  R: TRect;
begin
  with ASplitter do
  begin
    Result := nil;
    P := Point(Left, Top);
    case Align of
      alLeft: Dec(P.X);
      alRight: Inc(P.X, Width);
      alTop: Dec(P.Y);
      alBottom: Inc(P.Y, Height);
    else
      Exit;
    end;
    for I := 0 to Parent.ControlCount - 1 do
    begin
      Result := Parent.Controls[I];
      if Result.Visible and Result.Enabled then
      begin
        R := Result.BoundsRect;
        if (R.Right - R.Left) = 0 then
          if Align in [alTop, alLeft] then
            Dec(R.Left)
          else
            Inc(R.Right);
        if (R.Bottom - R.Top) = 0 then
          if Align in [alTop, alLeft] then
            Dec(R.Top)
          else
            Inc(R.Bottom);
        if PtInRect(R, P) then Exit;
      end;
    end;
    Result := nil;
  end;
end;
procedure SaveSplitterSettingsFromRegistry(const ASplitter : TSplitter; APath : String);
var Reg : TRegistry;
    S : String;
    AControl : TControl;
    Val : integer;
begin
  try
    AControl := HackFindControl(ASplitter);
    if AControl = nil then
      Exit;
    Reg := TRegistry.Create;
    try
      Reg.RootKey := HKEY_CURRENT_USER;
      case ASplitter.Align of
        alLeft, alRight: Val := AControl.Width;
        alTop, alBottom: Val := AControl.Height;
      end;
      if Reg.OpenKey(APath, true) then
        Reg.WriteInteger(ASplitter.Name + '_Val2', Val);
    finally
      Reg.CloseKey;
      Reg.Free;
    end;
  except
  end;
end;

procedure LoadSplitterSettingsFromRegistry(const ASplitter : TSplitter; APath : String);
var Reg : TRegistry;
    S : String;
    AControl : TControl;
    Val : integer;
begin
  try
    AControl := HackFindControl(ASplitter);
    if AControl = nil then
      Exit;
    Reg := TRegistry.Create;
    try
      Reg.RootKey := HKEY_CURRENT_USER;
      if Reg.OpenKey(APath, false) then
          if Reg.ValueExists(ASplitter.Name + '_Val2') then
          begin
            Val := Reg.ReadInteger(ASplitter.Name + '_Val2');
            case ASplitter.Align of
              alLeft, alRight: AControl.Width := Val;
              alTop, alBottom: AControl.Height := Val;
            end;
          end;
    finally
      Reg.CloseKey;
      Reg.Free;
    end;
  except
  end;
end;

procedure SaveFormSettingsToRegistry(const AForm : TForm; APath : String);
var Reg : TRegistry;
begin
  Reg := TRegistry.Create;
  try
    Reg.RootKey := HKEY_CURRENT_USER;

    if Reg.OpenKey(APath, true) then
    begin
      Reg.WriteInteger('WindowState', ORD(AForm.WindowState));
      if AForm.WindowState <> wsMaximized then
      begin
        Reg.WriteInteger('Top', AForm.Top);
        Reg.WriteInteger('Left', AForm.Left);
        Reg.WriteInteger('Height', AForm.Height);
        Reg.WriteInteger('Width', AForm.Width);
      end;
    end;
  finally
    Reg.CloseKey;
    Reg.Free;
  end;
end;

procedure LoadFormSettingsToRegistry(const AForm : TForm; APath : String);
var Reg : TRegistry;
begin
  Reg := TRegistry.Create;
  try
    Reg.RootKey := HKEY_CURRENT_USER;

    if Reg.OpenKey(APath, false) then
    begin
      if Reg.ValueExists('Top') then
        AForm.Top := Reg.ReadInteger('Top');
      if Reg.ValueExists('Left') then
        AForm.Left := Reg.ReadInteger('Left');
      if Reg.ValueExists('Height') then
        AForm.Height := Reg.ReadInteger('Height');
      if Reg.ValueExists('Width') then
        AForm.Width := Reg.ReadInteger('Width');
      if Reg.ValueExists('WindowState') then
        AForm.WindowState := TWindowState(Reg.ReadInteger('WindowState'));
    end;
  finally
    Reg.CloseKey;
    Reg.Free;
  end;
end;

procedure GetValues(Reg : TRegistry; SL : TStrings; Preff : String);
var  i : integer;
begin
  i := 0;
  while (i < 9) and (Reg.ValueExists(Preff + IntToStr(i))) do
  begin
    SL.Add(Reg.ReadString(Preff + IntToStr(i)));
    Inc(i);
  end;
end;

procedure SaveValues(Reg : TRegistry; SL : TStrings; Preff : String);
var  i : integer;
begin
  for i := 0 to SL.Count - 1 do
    Reg.WriteString(Preff + IntToStr(i), SL[i]);
end;


{ THackGridEh }

procedure THackGridEh.MouseToCell(X, Y: Integer; var ACol, ARow: Integer);
var
  Coord: GridsEh.TGridCoord;
begin
  Coord := MouseCoord(X, Y);
  ACol := Coord.X;
  ARow := Coord.Y;
end;

end.
